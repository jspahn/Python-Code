# Project Euler
# Problem 2: Even Fibonacci Numbers
# Problem Details:
#     Each new term in the Fibonacci sequence is generated by
#     adding the previous two terms.  By starting with 1 and 2, the first 10 terms will be:
#     1, 2, 3, 5, 8 , 13, 21, 34, 55, 89
#     By considering the terms in the Fibonacci sequence whose values do not exceed four
#     million, find the sum of the even- valued terms.


# Jeffrey Spahn
# created for Python 3.x

import time

def even_fib_sum(n):
    """Finds the sum of all even numbered Fibonacci numbers
        below the value of n"""

    sum_of_evens = 2
    a1 = 1
    a2 = 2
    a3 = a1 + a2

    while a3 < n:
        a1 = a2
        a2 = a3
        a3 = a1 + a2

        if a3 % 2 == 0:
            sum_of_evens += a3

    return sum_of_evens


#------------------------------------------------------------
#  Main
#------------------------------------------------------------
if __name__ == "__main__":
    start_time = time.time()
    n = 4000000     # The upper limit on the value of Fibonacci Numbers we will consider

    solution = even_fib_sum(n)
    print("The Sum of all Even Fibonacci Numbers below {0} is: {1}".format(n,solution))
    print("Completion time: {}".format(time.time() - start_time))
    # Output:
    #      The Sum of all Even Fibonacci Numbers below 4000000 is: 4613732
    #      Completion time: 2.2172927856445312e-05

